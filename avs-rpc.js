// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2014. All rights reserved.
 */

(function() {
  var Local, Remote, Rpc, angularRpc, ioRpc, wsRpc, xmlHttpRpc,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Local = (function() {
    function Local(local, method, asynchronous) {
      this.local = local;
      this.asynchronous = asynchronous;
      this[method] = (function(_this) {
        return function(args, cb) {
          var _ref;
          console.log("rpc local: " + method);
          return (_ref = _this.local)[method].apply(_ref, __slice.call(args).concat([cb]));
        };
      })(this);
    }

    return Local;

  })();

  Remote = (function() {
    Remote.prototype.count = 0;

    function Remote(rpc, methods) {
      var method, _i, _len;
      this.rpc = rpc;
      this.uid = (Math.random() + '').substring(2, 8);
      for (_i = 0, _len = methods.length; _i < _len; _i++) {
        method = methods[_i];
        this[method] = new Function("", "var arg, args, cb, last, _i, _len; args = []; for (_i = 0, _len = arguments.length; _i < _len; _i++) { args.push(arguments[_i]); } last = arguments[arguments.length - 1]; if (typeof last === 'function') { cb = last; args.pop()} return this.rpc._request({method:'" + method + "', args:args, cb:cb, id:'" + this.uid + "-'+(++this.count)});");
      }
    }

    return Remote;

  })();

  exports.Rpc = Rpc = (function() {
    Rpc.prototype.cbID = 0;

    function Rpc() {
      this.locals = [];
      this.callbacks = [];
      this._out = (function(_this) {
        return function(msg, message) {
          return _this.log("rpc " + msg.id + " error: no rpc out route defined");
        };
      })(this);
    }

    Rpc.prototype.out = function(send) {
      return this._out = send;
    };

    Rpc.prototype._request = function(msg) {
      var cbname, message;
      if (msg.cb && typeof msg.cb === 'function') {
        this.callbacks[cbname = msg.method + (" cb" + (this.cbID++))] = msg.cb;
        msg.cb = cbname;
      }
      message = JSON.stringify(msg);
      this.log("rpc " + msg.id + ": out " + message);
      this._out(msg, message);
      return message;
    };

    Rpc.prototype._reply = function(msg, args) {
      if (msg.cb) {
        return this._request({
          method: msg.cb,
          args: args,
          id: msg.id
        });
      }
    };

    Rpc.prototype._error = function(msg, args) {
      if (msg.cb) {
        return this._request({
          method: msg.cb,
          args: args,
          err: true,
          id: msg.id
        });
      }
    };

    Rpc.prototype.process = function(message) {
      var args, cb, e, local, msg;
      try {
        if (typeof message === 'string') {
          msg = JSON.parse(message);
        } else {
          msg = message;
          message = JSON.stringify(msg);
        }
        if (!(msg && msg.method)) {
          this.log(args = "rpc error: message is null");
          this._error({
            method: 'missing'
          }, args);
          return;
        }
        local = this.locals[msg.method];
        this.log("rpc " + msg.id + ": in  " + message);
        if (local) {
          if (!local.asynchronous) {
            return this._reply(msg, local[msg.method](msg.args));
          } else {
            if (msg.cb) {
              cb = (function(_this) {
                return function(rst, err) {
                  if (err) {
                    return _this._error(msg, err);
                  } else {
                    return _this._reply(msg, rst);
                  }
                };
              })(this);
            }
            if (msg.args) {
              return local[msg.method](msg.args, cb);
            } else {
              return local[msg.method](cb);
            }
          }
        } else if (this.callbacks[msg.method]) {
          if (msg.err) {
            this.callbacks[msg.method](void 0, msg.args);
          } else {
            this.callbacks[msg.method](msg.args);
          }
          return delete this.callbacks[msg.method];
        } else {
          this.log(args = "error: method " + msg.method + " is unknown");
          return this._error(msg, args);
        }
      } catch (_error) {
        e = _error;
        this.log(args = "error in " + msg.method + ": " + e);
        return this._error(msg, args);
      }
    };

    Rpc.prototype.remote = function(methods) {
      return new Remote(this, this._format(methods));
    };

    Rpc.prototype._expose = function(local, methods, asynchronous) {
      var method, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (!methods) {
        methods = [];
        _ref = Object.keys(local);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          method = _ref[_i];
          if (typeof local[method] === 'function') {
            methods.push(method);
          }
        }
      }
      _ref1 = this._format(methods);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        method = _ref1[_j];
        if (!local[method]) {
          _results.push(this.log("rpc warning: local object has no method " + method));
        } else if (this.locals[method]) {
          _results.push(this.log("rpc warning: duplicate method " + method));
        } else {
          _results.push(this.locals[method] = new Local(local, method, asynchronous));
        }
      }
      return _results;
    };

    Rpc.prototype.implement = function(local, methods) {
      return this._expose(local, methods, false);
    };

    Rpc.prototype.implementAsync = function(local, methods) {
      return this._expose(local, methods, true);
    };

    Rpc.prototype._format = function(methods) {
      if (typeof methods === 'string') {
        return [methods];
      } else {
        return methods;
      }
    };

    Rpc.prototype.log = function(text) {
      return console.log(text.length < 128 ? text : text.substring(0, 127) + ' ...');
    };

    return Rpc;

  })();

  exports.wsRpc = wsRpc = (function(_super) {
    __extends(wsRpc, _super);

    function wsRpc(ws) {
      wsRpc.__super__.constructor.call(this);
      if (ws && ws.send) {
        this.out(function(msg, message) {
          return ws.send(message, (function(_this) {
            return function(err) {
              if (err) {
                return _this.log(err.toString());
              }
            };
          })(this));
        });
      }
      this["in"](ws);
    }

    wsRpc.prototype["in"] = function(ws) {
      if (ws) {
        if (ws.on) {
          return ws.on('message', (function(_this) {
            return function(message, flags) {
              if (!flags.binary) {
                return _this.process(message);
              }
            };
          })(this));
        } else {
          return ws.onmessage = (function(_this) {
            return function(e) {
              if (e.data.length) {
                return _this.process(e.data);
              }
            };
          })(this);
        }
      }
    };

    return wsRpc;

  })(Rpc);

  exports.angularRpc = angularRpc = (function(_super) {
    __extends(angularRpc, _super);

    function angularRpc(http) {
      angularRpc.__super__.constructor.call(this);
      this.out(function(msg, message) {
        return http.post('/rpc', msg).success((function(_this) {
          return function(message) {
            if (message) {
              return _this.process(message);
            }
          };
        })(this));
      });
    }

    return angularRpc;

  })(Rpc);

  exports.xmlHttpRpc = xmlHttpRpc = (function(_super) {
    __extends(xmlHttpRpc, _super);

    function xmlHttpRpc(xhr) {
      xmlHttpRpc.__super__.constructor.call(this);
      this.out(function(msg, message) {
        xhr.open('POST', '/rpc', true);
        xhr.setRequestHeader('Content-type', 'application/json');
        xhr.onload((function(_this) {
          return function() {
            return _this.process(xhr.response);
          };
        })(this));
        return xhr.send(message);
      });
    }

    return xmlHttpRpc;

  })(Rpc);

  exports.ioRpc = ioRpc = (function(_super) {
    __extends(ioRpc, _super);

    function ioRpc(socket) {
      ioRpc.__super__.constructor.call(this);
      if (socket) {
        this.out(function(msg, message) {
          return socket.emit('rpc', msg);
        });
        socket.on('rpc', (function(_this) {
          return function(msg) {
            return _this.process(msg);
          };
        })(this));
      }
    }

    return ioRpc;

  })(Rpc);

}).call(this);
